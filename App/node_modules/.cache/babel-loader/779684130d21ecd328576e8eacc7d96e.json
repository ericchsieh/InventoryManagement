{"ast":null,"code":"import _classCallCheck from \"/Users/erichsieh/Documents/GitHub/project_g2i4q_g9y0b_s0q8j/cpsc304-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/erichsieh/Documents/GitHub/project_g2i4q_g9y0b_s0q8j/cpsc304-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/erichsieh/Documents/GitHub/project_g2i4q_g9y0b_s0q8j/cpsc304-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/erichsieh/Documents/GitHub/project_g2i4q_g9y0b_s0q8j/cpsc304-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/erichsieh/Documents/GitHub/project_g2i4q_g9y0b_s0q8j/cpsc304-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/erichsieh/Documents/GitHub/project_g2i4q_g9y0b_s0q8j/cpsc304-app/src/pages/Assets.jsx\";\nimport React from \"react\";\nimport assets from \"./mock-data.json\";\nimport { Fragment } from 'react';\nimport AssetRow from \"../components/AssetRow\";\n\n// sample data:\n// using the mock-data.json file to test the functionalities.\nvar Assets = /*#__PURE__*/function (_React$Component) {\n  _inherits(Assets, _React$Component);\n  function Assets(props) {\n    var _this;\n    _classCallCheck(this, Assets);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Assets).call(this, props));\n    _this.state = {\n      data: assets\n    };\n    return _this;\n  }\n  _createClass(Assets, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"container-fluid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }\n      }, \"Assets\"), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"mt-2 bg-light round\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"px-3 mt-3 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 33\n        }\n      }, \"Inventory #\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 33\n        }\n      }, \"Cost\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 33\n        }\n      }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 33\n        }\n      }, \"Model\")), this.state.data.map(function (asset) {\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(AssetRow, {\n          asset: asset,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 41\n          }\n        }));\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"/catalogue\",\n        class: \"my-2 btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }\n      }, \"Add Asset\"))));\n    }\n  }]);\n  return Assets;\n}(React.Component); // function Assets() {\n//     const [assets, setAssets] = useState(data);\n//     const [addFormData, setAddFormData] = useState({\n//         inventoryNum: '',\n//         cost: '',\n//         name: '',\n//         model: ''\n//     });\n// // Edit button: repopulate row implmentation \n//     const [editFormData, setEditFormData] = useState({\n//         inventoryNum: '',\n//         cost: '',\n//         name: '',\n//         model: ''\n//     });\n// // These consts are used to handle the \"Edit\" feature.\n//     const handleEditFormChange = (event) => {\n//         // Prevents Form from doing a POST request. \n//         event.preventDefault();\n//         const fieldName = event.target.getAttribute('name');\n//         const fieldValue = event.target.value;\n//         const newFormData = { ...editFormData };\n//         newFormData[fieldName] = fieldValue;\n//         setEditFormData(newFormData);\n//     };\n//     const handEditFormSubmit = (event) => {\n//         event.preventDefault();\n//         const editedAsset = {\n//             id: editAssetId,\n//             inventoryNum: editFormData.inventoryNum,\n//             cost: editFormData.cost,\n//             name: editFormData.name,\n//             model: editFormData.model\n//         } \n//         const newAssets = [...assets];\n//         const index = assets.findIndex((asset)=> asset.id === editAssetId);\n//         newAssets[index] = editedAsset;\n//         setAssets(newAssets);\n//         setEditAssetId(null);\n//     }\n// // These consts are used to handle \"Add Asset\" \n// // Cancel button  just changes the useState back to null.\n//     const [editAssetId, setEditAssetId] = useState(null); \n//     const handleAddFormChange = (event) => {\n//         event.preventDefault();\n//         const fieldName = event.target.getAttribute('name');\n//         const fieldValue = event.target.value;\n//         const newFormData = { ...addFormData};\n//         newFormData[fieldName] = fieldValue;\n//         setAddFormData(newFormData);\n//     };\n// //\n//     const handleAddFormSubmit = (event) => {\n//         event.preventDefault();\n//         const newAsset = {\n//             id: nanoid(),\n//             inventoryNum: addFormData.inventoryNum,\n//             cost: addFormData.cost,\n//             name: addFormData.name,\n//             model: addFormData.model\n//         }\n//         const newAssets = [...assets, newAsset];\n//         setAssets(newAssets);  \n//     };\n// // Edit button to select row.\n//     const handleEditClick = (event, asset) => {\n//         event.preventDefault();\n//         setEditAssetId(asset.id);\n//         // Edit implementation\n//         const formValues = {\n//             inventoryNum: asset.inventoryNum,\n//             cost: asset.cost,\n//             name: asset.name,\n//             model: asset.model\n//         }\n//         setEditFormData(formValues);\n//     };\n//     // Cancel Edit button\n//     const handleCancelClick = () => {\n//         setEditAssetId(null);\n//     }\n//     // Delete function\n//     const handleDeleteClick = (assetId) => {\n//         const newAssets = [...assets];\n//         const index = assets.findIndex((asset)=> asset.id === assetId);\n//         newAssets.splice(index, 1);\n//         setAssets(newAssets);\n//     }\n// // This is where the HTML code is generated. ////////////////////////////\n//     return (\n//         <div class=\"container-fluid\">\n//             <div class=\"mt-2 bg-light round\">\n//                 <div class=\"px-3 mt-3 mb-3\">\n//                     <h1 class=\"display-4\">Assets</h1>\n//                     <form onSubmit={handEditFormSubmit}>\n//                         <table>\n//                             <tr>\n//                                 <th>Inventory #</th>\n//                                 <th>Cost</th>\n//                                 <th>Name</th>\n//                                 <th>Model</th>\n//                                 <th>Actions</th>\n//                             </tr>\n//                             {/* If statement to select which asset.id to Edit */}\n//                                 {assets.map((asset) => (\n//                                     <Fragment>\n//                                         {editAssetId === asset.id ? (\n//                                             <EditableRow editFormData={editFormData} \n//                                             handleEditFormChange={handleEditFormChange}\n//                                             handleCancelClick={handleCancelClick}/> \n//                                         ) : (\n//                                             <ReadOnlyRow asset={asset} \n//                                             handleEditClick={handleEditClick}\n//                                             handleDeleteClick={handleDeleteClick}/> \n//                                         )}\n//                                     </Fragment>\n//                                 ))}\n//                         </table>\n//                     </form>\n//                 </div>\n//             </div>\n//             <div>\n//                 <form>\n//                     <button type=\"submit\" class=\"my-2 btn btn-primary\">Add Asset</button>\n//                 </form>\n//             </div>\n//         </div>\n//     );\n// }\nexport default Assets;","map":{"version":3,"names":["React","assets","Fragment","AssetRow","Assets","props","state","data","map","asset","Component"],"sources":["/Users/erichsieh/Documents/GitHub/project_g2i4q_g9y0b_s0q8j/cpsc304-app/src/pages/Assets.jsx"],"sourcesContent":["import React from \"react\";\nimport assets from \"./mock-data.json\";\nimport { Fragment } from 'react';\nimport AssetRow from \"../components/AssetRow\";\n\n// sample data:\n// using the mock-data.json file to test the functionalities.\n\nclass Assets extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: assets\n        }\n    }\n\n    \n\n    render() {\n        return (\n            <div class=\"container-fluid\">\n                <h1>Assets</h1>\n                <div class=\"mt-2 bg-light round\">\n                    <div class=\"px-3 mt-3 mb-3\">\n                        <table>\n                            <tr>\n                                <th>Inventory #</th>\n                                <th>Cost</th>\n                                <th>Name</th>\n                                <th>Model</th>\n                            </tr>\n                            {\n                                this.state.data.map((asset) => (\n                                    <Fragment>\n                                        <AssetRow asset={asset}/> \n                                    </Fragment>\n                                ))\n                            }\n                        </table>\n                    </div>\n                </div>\n                <div class=\"text-center\">\n                    <form>\n                        <a href=\"/catalogue\" class=\"my-2 btn btn-primary\">Add Asset</a>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\n// function Assets() {\n//     const [assets, setAssets] = useState(data);\n//     const [addFormData, setAddFormData] = useState({\n//         inventoryNum: '',\n//         cost: '',\n//         name: '',\n//         model: ''\n//     });\n// // Edit button: repopulate row implmentation \n//     const [editFormData, setEditFormData] = useState({\n//         inventoryNum: '',\n//         cost: '',\n//         name: '',\n//         model: ''\n//     });\n// // These consts are used to handle the \"Edit\" feature.\n//     const handleEditFormChange = (event) => {\n//         // Prevents Form from doing a POST request. \n//         event.preventDefault();\n\n//         const fieldName = event.target.getAttribute('name');\n//         const fieldValue = event.target.value;\n\n//         const newFormData = { ...editFormData };\n//         newFormData[fieldName] = fieldValue;\n\n//         setEditFormData(newFormData);\n//     };\n\n//     const handEditFormSubmit = (event) => {\n//         event.preventDefault();\n\n//         const editedAsset = {\n//             id: editAssetId,\n//             inventoryNum: editFormData.inventoryNum,\n//             cost: editFormData.cost,\n//             name: editFormData.name,\n//             model: editFormData.model\n//         } \n\n//         const newAssets = [...assets];\n//         const index = assets.findIndex((asset)=> asset.id === editAssetId);\n\n//         newAssets[index] = editedAsset;\n//         setAssets(newAssets);\n//         setEditAssetId(null);\n//     }\n// // These consts are used to handle \"Add Asset\" \n// // Cancel button  just changes the useState back to null.\n//     const [editAssetId, setEditAssetId] = useState(null); \n\n//     const handleAddFormChange = (event) => {\n//         event.preventDefault();\n    \n//         const fieldName = event.target.getAttribute('name');\n//         const fieldValue = event.target.value;\n    \n//         const newFormData = { ...addFormData};\n//         newFormData[fieldName] = fieldValue;\n    \n//         setAddFormData(newFormData);\n//     };\n// //\n//     const handleAddFormSubmit = (event) => {\n//         event.preventDefault();\n\n//         const newAsset = {\n//             id: nanoid(),\n//             inventoryNum: addFormData.inventoryNum,\n//             cost: addFormData.cost,\n//             name: addFormData.name,\n//             model: addFormData.model\n//         }\n\n//         const newAssets = [...assets, newAsset];\n//         setAssets(newAssets);  \n//     };\n\n// // Edit button to select row.\n//     const handleEditClick = (event, asset) => {\n//         event.preventDefault();\n//         setEditAssetId(asset.id);\n\n//         // Edit implementation\n//         const formValues = {\n//             inventoryNum: asset.inventoryNum,\n//             cost: asset.cost,\n//             name: asset.name,\n//             model: asset.model\n//         }\n\n//         setEditFormData(formValues);\n//     };\n\n//     // Cancel Edit button\n//     const handleCancelClick = () => {\n//         setEditAssetId(null);\n//     }\n//     // Delete function\n//     const handleDeleteClick = (assetId) => {\n//         const newAssets = [...assets];\n\n//         const index = assets.findIndex((asset)=> asset.id === assetId);\n//         newAssets.splice(index, 1);\n\n//         setAssets(newAssets);\n//     }\n    \n// // This is where the HTML code is generated. ////////////////////////////\n//     return (\n//         <div class=\"container-fluid\">\n//             <div class=\"mt-2 bg-light round\">\n//                 <div class=\"px-3 mt-3 mb-3\">\n//                     <h1 class=\"display-4\">Assets</h1>\n//                     <form onSubmit={handEditFormSubmit}>\n//                         <table>\n//                             <tr>\n//                                 <th>Inventory #</th>\n//                                 <th>Cost</th>\n//                                 <th>Name</th>\n//                                 <th>Model</th>\n//                                 <th>Actions</th>\n//                             </tr>\n//                             {/* If statement to select which asset.id to Edit */}\n//                                 {assets.map((asset) => (\n//                                     <Fragment>\n//                                         {editAssetId === asset.id ? (\n//                                             <EditableRow editFormData={editFormData} \n//                                             handleEditFormChange={handleEditFormChange}\n//                                             handleCancelClick={handleCancelClick}/> \n//                                         ) : (\n//                                             <ReadOnlyRow asset={asset} \n//                                             handleEditClick={handleEditClick}\n//                                             handleDeleteClick={handleDeleteClick}/> \n//                                         )}\n//                                     </Fragment>\n//                                 ))}\n//                         </table>\n//                     </form>\n//                 </div>\n//             </div>\n//             <div>\n//                 <form>\n//                     <button type=\"submit\" class=\"my-2 btn btn-primary\">Add Asset</button>\n//                 </form>\n//             </div>\n//         </div>\n//     );\n// }\n\nexport default Assets;"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,kBAAkB;AACrC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,QAAQ,MAAM,wBAAwB;;AAE7C;AACA;AAAA,IAEMC,MAAM;EAAA;EACR,gBAAYC,KAAK,EAAE;IAAA;IAAA;IACf,4EAAMA,KAAK;IACX,MAAKC,KAAK,GAAG;MACTC,IAAI,EAAEN;IACV,CAAC;IAAA;EACL;EAAC;IAAA;IAAA,yBAIQ;MAAA;MACL,oBACI;QAAK,KAAK,EAAC,iBAAiB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACxB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,YAAe,eACf;QAAK,KAAK,EAAC,qBAAqB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBAC5B;QAAK,KAAK,EAAC,gBAAgB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACvB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,iBAAoB,eACpB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,UAAa,eACb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,UAAa,eACb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,WAAc,CACb,EAED,IAAI,CAACK,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,UAACC,KAAK;QAAA,oBACtB,oBAAC,QAAQ;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACL,oBAAC,QAAQ;UAAC,KAAK,EAAEA,KAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAE,CAClB;MAAA,CACd,CAAC,CAEF,CACN,CACJ,eACN;QAAK,KAAK,EAAC,aAAa;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACpB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAG,IAAI,EAAC,YAAY;QAAC,KAAK,EAAC,sBAAsB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,eAAc,CAC5D,CACL,CACJ;IAEd;EAAC;EAAA;AAAA,EAxCgBT,KAAK,CAACU,SAAS,GA2CpeAAeN,MAAM"},"metadata":{},"sourceType":"module"}